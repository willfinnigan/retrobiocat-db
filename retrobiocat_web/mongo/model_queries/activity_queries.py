import pandas as pd

from retrobiocat_web.mongo.models.biocatdb_models import Activity
import mongoengine as db


def activity_for_mol(smi, mol_type):
    if mol_type == 'substrate_1_smiles':
        return Activity.objects(substrate_1_smiles=smi)
    elif mol_type == 'substrate_2_smiles':
        return Activity.objects(substrate_2_smiles=smi)
    else:
        return Activity.objects(product_1_smiles=smi)

def activity_in_paper(paper, seq_name=None, count_only=False, include_autogenerated=False):
    """Get the activities for a paper, optionally a single sequence"""

    paper_q = db.Q(paper=paper)
    seq_q = db.Q()
    if seq_name is not None:
        seq_q = db.Q(enzyme_name=seq_name)

    auto_q = db.Q()
    if include_autogenerated:
        auto_q = db.Q(auto_generated__ne=True)

    if count_only == True:
        return Activity.objects(paper_q & seq_q & auto_q).count()

    return Activity.objects(paper_q & seq_q & auto_q)

def activities_of_type(enzyme_type_abbrev, count_only=False):
    """Get the activities marked as a particular enzyme type"""

    if count_only == True:
        return Activity.objects(enzyme_type=enzyme_type_abbrev).count()

    return Activity.objects(enzyme_type=enzyme_type_abbrev)

def activity_for_sequence(seq, count_only=True):
    """ Get the activity data for a sequence """

    query = db.Q(enzyme_name=seq.enzyme_name)

    if count_only == True:
        return Activity.objects(query).count()

    return Activity.objects(query)

def num_activity_owned_by_user(user):
    return Activity.objects(added_by=user).count()

def reactions_from_activity(enzyme_type=None, include_chemical=False, reviewed=True):
    et_q = db.Q()
    if enzyme_type is not None and enzyme_type != 'All':
        et_q = db.Q(enzyme_type=enzyme_type)

    ic_q = db.Q()
    if not include_chemical:
        ic_q = db.Q(enzyme_type__ne='Chemical')

    rev_q = db.Q()
    if reviewed:
        rev_q = db.Q(reviewed=True)

    reactions = list(Activity.objects(ic_q & et_q & rev_q).distinct('reaction'))
    return reactions

def enzyme_types_from_activity(reaction=None, include_chemical=True, reviewed=True):
    r_q = db.Q()
    if reaction is not None and reaction != 'All':
        r_q = db.Q(reaction=reaction)

    ic_q = db.Q()
    if not include_chemical:
        ic_q = db.Q(enzyme_type__ne='Chemical')

    rev_q = db.Q()
    if reviewed:
        rev_q = db.Q(reviewed=True)

    enzyme_types = list(Activity.objects(ic_q & r_q & rev_q).distinct('enzyme_type'))
    return enzyme_types

def activities_of_reaction(rxn_name, select_related=False):
    if select_related:
        return Activity.objects(reaction=rxn_name).select_related()
    else:
        return Activity.objects(reaction=rxn_name)

def distinct_product_1_smiles():
    return list(Activity.objects().distinct('product_1_smiles'))

def distinct_substrate_1_smiles():
    return list(Activity.objects().distinct('substrate_1_smiles'))

def distinct_substrate_2_smiles():
    return list(Activity.objects().distinct('substrate_2_smiles'))

def enzyme_types_for_which_there_are_activities():
    return list(Activity.objects().distinct('enzyme_type'))

def reactions_for_which_there_are_activities():
    return list(Activity.objects().distinct('reaction'))

